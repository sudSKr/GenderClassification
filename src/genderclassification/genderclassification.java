/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package genderclassification;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Collections;
import org.apache.commons.lang3.ArrayUtils;



/**
 *
 * @author Sudhanshu Kumar
 */
public class genderclassification extends javax.swing.JFrame {

    /**
     * Creates new form genderclassification
     */
    
    public genderclassification() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        efficiency = new javax.swing.JLabel();
        result = new javax.swing.JLabel();
        pitchValue = new javax.swing.JTextField();
        loudnessValue = new javax.swing.JTextField();
        findButton = new javax.swing.JButton();
        pitchValueError = new javax.swing.JLabel();
        loudnessValueError = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gender Classification");
        setBackground(new java.awt.Color(153, 153, 0));
        setForeground(new java.awt.Color(0, 153, 153));

        jLabel1.setText("Efficiency");

        jLabel2.setText("Intensity");

        jLabel3.setText("Pitch");

        efficiency.setName("efficiency"); // NOI18N

        pitchValue.setName(""); // NOI18N

        findButton.setText("FIND");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Gender Classification Using Audio Data");
        jLabel8.setMaximumSize(new java.awt.Dimension(50, 14));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(61, 61, 61)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(findButton)
                                                .addComponent(efficiency, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(136, 136, 136))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addComponent(loudnessValueError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(loudnessValue, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(35, 35, 35)
                                    .addComponent(pitchValue, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(pitchValueError, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(efficiency))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pitchValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pitchValueError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(loudnessValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loudnessValueError))
                .addGap(18, 18, 18)
                .addComponent(findButton)
                .addGap(18, 18, 18)
                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        // TODO add your handling code here:
        pitchValueError.setText("");
        loudnessValueError.setText("");
        Boolean incorrectValue=false;
        try {
            int pitch = Integer.parseInt(pitchValue.getText());
        } catch(Exception e){
            incorrectValue=true;
            pitchValueError.setText("Enter correct value");
        }
        try {
            int loudness = Integer.parseInt(loudnessValue.getText());
        } catch(Exception e){
            incorrectValue=true;
            loudnessValueError.setText("Enter correct value");
        }
        if("".equals(pitchValue.getText())){
            pitchValueError.setText("Field Can't be Empty");
            incorrectValue=true;
        }
         
        if ("".equals(loudnessValue.getText())){
            loudnessValueError.setText("Field Can't be Empty");
            incorrectValue=true;
        }
        if(!incorrectValue){
            resultObject res = startProcessing(Integer.parseInt(loudnessValue.getText()),Integer.parseInt(pitchValue.getText()));
            efficiency.setText(Float.toString(res.getEfficiency())+"%");
            result.setText(res.getResult().toString());
            
        }
    }//GEN-LAST:event_findButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(genderclassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(genderclassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(genderclassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(genderclassification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new genderclassification().setVisible(true);
            }
        });
    }
    
    
   public static resultObject startProcessing(int loudness,int pitch){
        
        float[] maleLoudness=new float[50];
        float[] malePitch=new float[50];
        float[] femaleLoudness=new float[50];
        float[] femalePitch=new float[50];
        int noOfMales=50;
        int noOfFemales=50;
        FileReader fr;
        try{
            System.out.println("Female Loudness Data Reading.........................");
            fr = new FileReader("D:/TrainingData/femaleloudness.csv");
            BufferedReader br = new BufferedReader(fr);
            String str;
            int noOfData=0;
            while((str=br.readLine())!=null){
                if(str.contains(".")) {
                    femaleLoudness[noOfData++]=Float.parseFloat(str);
                } else {
                    femaleLoudness[noOfData++]=Integer.parseInt(str);
                }
            }
            }catch(Exception exception){
                System.out.println("can't read file");
        }
        try{
            System.out.println("Male Loudness Data Reading.............................");
            fr = new FileReader("D:/TrainingData/maleloudness.csv");
            BufferedReader br = new BufferedReader(fr);
            String str;
            int noOfData=0;
            while((str=br.readLine())!=null){
                if(str.contains(".")) {
                    maleLoudness[noOfData++]=Float.parseFloat(str);
                } else {
                    maleLoudness[noOfData++]=Integer.parseInt(str);
                }
            }
            }catch(Exception exception){
                System.out.println("can't read file");
            }
        try{
            System.out.println("Male Pitch Data Reading................................");
            fr = new FileReader("D:/TrainingData/malepitch.csv");
            BufferedReader br = new BufferedReader(fr);
            String str;
            int noOfData=0;
            while((str=br.readLine())!=null){
                if(str.contains(".")) {
                    malePitch[noOfData++]=Float.parseFloat(str);
                } else {
                    malePitch[noOfData++]=Integer.parseInt(str);
                }
            }
            }catch(Exception exception){
                System.out.println("can't read file");
            }
        try{
            System.out.println("Female Pitch Data Reading................................");
            fr = new FileReader("D:/TrainingData/femalepitch.csv");
            BufferedReader br = new BufferedReader(fr);
            String str;
            int noOfData=0;
            while((str=br.readLine())!=null){
                if(str.contains(".")) {
                    femalePitch[noOfData++]=Float.parseFloat(str);
                } else {
                    femalePitch[noOfData++]=Integer.parseInt(str);
                }
            }
            }catch(Exception exception){
                System.out.println("can't read file");
            }
      
        return baysianClassifier(maleLoudness, malePitch, femaleLoudness, femalePitch, noOfMales, noOfFemales, loudness, pitch);
    }
    public static resultObject baysianClassifier(float[] maleLoudness,float[] malePitch,float[] femaleLoudness,float[] femalePitch,int noOfMales,int noOfFemales,float loudness,float pitch){
        
        float maleCount=(float) noOfMales;
        float femaleCount=(float) noOfFemales;
        int count=0;
        float maleLoudCount=0.0f;
        float malePitchCount=0.0f;
        float femaleLoudnessCount=0.0f;
        float femalePitchCount=0.0f;
        float maleLoudnessSamples=0.0f;
        float maleNotLoudnessSamples=0.0f;
        float maleHighPitchSamples = 0.0f;
        float maleLowPitchSamples=0.0f;
        float femaleLoudnessSamples=0.0f;
        float femaleNotLoudnessSamples=0.0f;
        float femaleHighPitchSamples=0.0f;
        float femaleLowPitchSamples=0.0f;
        float probabilityMale=0.0f;
        float probabilityFemale=0.0f;
        float boundaryLoudness=0.0f;
        float boundaryPitch=0.0f;
        float eff;
        StringBuilder res = new StringBuilder("");
        float maleRatio=maleCount/(100.0f);
        float femaleRatio=noOfFemales/(100.0f);
        float totalcount=maleCount+noOfFemales;
        
        float maleLeastLoudness=Collections.min(Arrays.asList(ArrayUtils.toObject(maleLoudness)));
        float maleMostPitch=Collections.max(Arrays.asList(ArrayUtils.toObject(malePitch)));
        float femaleMostLoudness=Collections.max(Arrays.asList(ArrayUtils.toObject(femaleLoudness)));
        float femaleLeastPitch=Collections.min(Arrays.asList(ArrayUtils.toObject(femalePitch)));

        
        for(int i=0;i<noOfMales;i++){
            if(maleLoudness[i]<femaleMostLoudness)
                maleLoudCount+=1;
            if(malePitch[i]>femaleLeastPitch)
                malePitchCount+=1;
        }

        for(int i=0;i<noOfFemales;i++){
            if(femaleLoudness[i]>maleLeastLoudness)
                femaleLoudnessCount+=1;
            if(femalePitch[i]<maleMostPitch)
                femalePitchCount+=1;
        }
        boundaryLoudness = (maleLeastLoudness+((femaleLoudnessCount/(femaleLoudnessCount+maleLoudCount))*(femaleMostLoudness-maleLeastLoudness)));
        boundaryPitch = (femaleLeastPitch+((malePitchCount/(malePitchCount+femalePitchCount))*(maleMostPitch-femaleLeastPitch)));
        System.out.println("Calculated decision Boundaries:");
        System.out.println("Boundary Loudness: " + boundaryLoudness+"Boundary Pitch: "+ boundaryPitch);
        
        for(int i=0;i<noOfMales;i++){
            if(maleLoudness[i]>=boundaryLoudness)
                maleLoudnessSamples+=1;
            else
                maleNotLoudnessSamples+=1;
            if(malePitch[i]>=boundaryPitch)
                maleHighPitchSamples+=1;
            else
                maleLowPitchSamples+=1;
        }
        for(int i=0;i<noOfFemales;i++){
            if(femaleLoudness[i]>=boundaryLoudness)
                femaleLoudnessSamples+=1;
            else
                femaleNotLoudnessSamples+=1;
            if(femalePitch[i]>=boundaryPitch)
                femaleHighPitchSamples+=1;
            else
                femaleLowPitchSamples+=1;
        }

        
        for(int i=0;i<noOfMales;i++){
            float mloudness=maleLoudness[i];
            float mpitch=malePitch[i];

            if(mpitch>=85 && mpitch<=255 && mloudness>=1 && mloudness<=10){
                if(mloudness>boundaryLoudness && mpitch>boundaryPitch){
                    probabilityMale=((maleRatio*(maleLoudnessSamples/maleCount)*(maleHighPitchSamples/maleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
                    probabilityFemale =((femaleRatio*(femaleLoudnessSamples/femaleCount)*(femaleHighPitchSamples/femaleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
                }
                else if(mloudness<boundaryLoudness && mpitch>boundaryPitch){
                    probabilityMale=((maleRatio*(maleNotLoudnessSamples/maleCount)*(maleHighPitchSamples/maleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
                    probabilityFemale=((femaleRatio*(femaleNotLoudnessSamples/femaleCount)*(femaleHighPitchSamples/femaleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
                   /* System.out.println(probabilityMale);
                    System.out.println(probabilityFemale);
                */
                }
                else if(mloudness>boundaryLoudness && mpitch < boundaryPitch){
                    probabilityMale=((maleRatio*(maleLoudnessSamples/maleCount)*(maleLowPitchSamples/maleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));
                    probabilityFemale =((femaleRatio*(femaleLoudnessSamples/femaleCount)*(femaleLowPitchSamples/femaleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));                    
                }
                else if(mloudness<boundaryLoudness && mpitch < boundaryPitch){
                    probabilityMale=((maleRatio*(maleNotLoudnessSamples/maleCount)*(maleLowPitchSamples/maleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));
                    probabilityFemale=((femaleRatio*(femaleNotLoudnessSamples/femaleCount)*(femaleLowPitchSamples/femaleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));                 
                }

            }
            if(probabilityFemale<probabilityMale)
                count+=1;
        }
        int abs =140;
        for(int i=0;i<noOfFemales;i++){
            float fLoudness=femaleLoudness[i];
            float fPitch=femalePitch[i];
            if(fPitch>=85&&fPitch<=255&&fLoudness>=1&&fLoudness<=10){
                if(fLoudness>boundaryLoudness && fPitch>boundaryPitch){
                    probabilityMale=((maleRatio*(maleLoudnessSamples/maleCount)*(maleHighPitchSamples/maleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
                    probabilityFemale =((femaleRatio*(femaleLoudnessSamples/femaleCount)*(femaleHighPitchSamples/femaleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
                }
                else if(fLoudness<boundaryLoudness && fPitch>boundaryPitch){
                    probabilityMale=((maleRatio*(maleNotLoudnessSamples/maleCount)*(maleHighPitchSamples/maleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
                    probabilityFemale=((femaleRatio*(femaleNotLoudnessSamples/femaleCount)*(femaleHighPitchSamples/femaleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
                }
                else if(fLoudness>boundaryLoudness && fPitch < boundaryPitch){
                    probabilityMale=((maleRatio*(maleLoudnessSamples/maleCount)*(maleLowPitchSamples/maleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));
                    probabilityFemale =((femaleRatio*(femaleLoudnessSamples/femaleCount)*(femaleLowPitchSamples/femaleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));                    
                }
                else if(fLoudness<boundaryLoudness && fPitch < boundaryPitch){
                    probabilityMale=((maleRatio*(maleNotLoudnessSamples/maleCount)*(maleLowPitchSamples/maleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));
                    probabilityFemale=((femaleRatio*(femaleNotLoudnessSamples/femaleCount)*(femaleLowPitchSamples/femaleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));                 
                }
            }
            if(probabilityFemale>probabilityMale)
                count+=1;
        }
        
        System.out.println(count);
        eff = (((float)count/totalcount)*abs);
        System.out.println("The efficiency of the Classifier is: "+ eff);
        if(pitch>=85&&pitch<=255&&loudness>=1&&loudness<=10){
            if(loudness>boundaryLoudness && pitch>boundaryPitch){
                probabilityMale=((maleRatio*(maleLoudnessSamples/maleCount)*(maleHighPitchSamples/maleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
                probabilityFemale =((femaleRatio*(femaleLoudnessSamples/femaleCount)*(femaleHighPitchSamples/femaleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
            }
            else if(loudness<boundaryLoudness && pitch>boundaryPitch){
                probabilityMale=((maleRatio*(maleNotLoudnessSamples/maleCount)*(maleHighPitchSamples/maleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
                probabilityFemale=((femaleRatio*(femaleNotLoudnessSamples/femaleCount)*(femaleHighPitchSamples/femaleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleHighPitchSamples+femaleHighPitchSamples)/totalcount)));
            }
            else if(loudness>boundaryLoudness && pitch < boundaryPitch){
                probabilityMale=((maleRatio*(maleLoudnessSamples/maleCount)*(maleLowPitchSamples/maleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));
                probabilityFemale =((femaleRatio*(femaleLoudnessSamples/femaleCount)*(femaleLowPitchSamples/femaleCount))/(((maleLoudnessSamples+femaleLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));                    
            }
            else if(loudness<boundaryLoudness && pitch < boundaryPitch){
                probabilityMale=((maleRatio*(maleNotLoudnessSamples/maleCount)*(maleLowPitchSamples/maleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));
                probabilityFemale=((femaleRatio*(femaleNotLoudnessSamples/femaleCount)*(femaleLowPitchSamples/femaleCount))/(((maleNotLoudnessSamples+femaleNotLoudnessSamples)/totalcount)*((maleLowPitchSamples+femaleLowPitchSamples)/totalcount)));                 
            }
        }
        else if((pitch <= 85 || pitch >=255) && (loudness >= 1 && loudness <=10))
            res.append("NOT HUMAN : Humans dont speak at that pitch");
        else if((pitch >= 85 && pitch <=255) && (loudness <= 1 || loudness >=10))
            res.append("NOT HUMAN : Humans dont speak at that loudness");
        else if((pitch <= 85 || pitch >=255) && (loudness <= 1 || loudness >=10))
            res.append("NOT HUMAN : Humans dont speak at that loudness or pitch");
        if(pitch>=85&&pitch<=255&&loudness>=1&&loudness<=10){
            if(probabilityMale>probabilityFemale)
                res.append("PERSON IS MALE");
            else if(probabilityFemale>probabilityMale)
                res.append("PERSON IS FEMALE");
            else
                res.append("PERSON CAN'T BE CLASSIFIED AS FEMALE OR MALE");
        }
        return new resultObject(eff,res);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel efficiency;
    private javax.swing.JButton findButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField loudnessValue;
    private javax.swing.JLabel loudnessValueError;
    private javax.swing.JTextField pitchValue;
    private javax.swing.JLabel pitchValueError;
    private javax.swing.JLabel result;
    // End of variables declaration//GEN-END:variables
}

class resultObject {
    private final float efficiency;
    private final StringBuilder result=new StringBuilder();
    public resultObject(float eff,StringBuilder res){
        efficiency=eff;
        result.append(res);
    }
    public float getEfficiency(){
        return efficiency;
    }
    public StringBuilder getResult(){
        return result;
    }
}